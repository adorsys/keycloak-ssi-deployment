app-template:
  global:
    fullnameOverride: keycloak
    namespaceOverride: datev-wallet
    labels:
      app: keycloak

  defaultPodOptions:
    imagePullSecrets:
      - name: ghcr-pull-secret

  # Keycloak configuration
  controllers:
    main:
      enabled: true
      type: deployment
      replicas: 1
      serviceAccount:
        name: keycloak-job-sa
      initContainers:
        wait-for-configmap:
          image:
            repository: bitnami/kubectl
            tag: latest
            pullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              until kubectl get configmap keycloak-env-config -n datev-wallet; do
                echo "Waiting for keycloak-env-config..."; sleep 2;
              done
        wait-for-postgres:
          image:
            repository: bitnami/kubectl
            tag: latest
            pullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              until kubectl get svc keycloak-postgresql -n datev-wallet; do
                echo "Waiting for PostgreSQL service..."; sleep 2;
              done
              until kubectl exec -n datev-wallet keycloak-postgresql-0 -- pg_isready -U datevadmin -d keycloakdb; do
                echo "Waiting for PostgreSQL to be ready..."; sleep 2;
              done
      containers:
        main:
          image:
            repository: ghcr.io/adorsys/keycloak-ssi-deployment
            tag: 1.0.0
            pullPolicy: Always

  # Persistence for ConfigMap volume
  persistence:
    env-volume:
      enabled: true
      type: configMap
      name: keycloak-env-config
      globalMounts:
        - path: /opt/keycloak/env/.env
          subPath: .env
          readOnly: true

  # ConfigMap for environment variables
  configMaps:
    keycloak-env-config:
      enabled: true
      data:
        .env: ""

  # Secrets (referenced but managed by ExternalSecret)
  secrets:
    keycloak-secret:
      enabled: true
      stringData:
        KC_DB_PASSWORD: ""
        KC_BOOTSTRAP_ADMIN_PASSWORD: ""

  # Service configuration
  service:
    main:
      enabled: true
      controller: main
      type: ClusterIP
      ports:
        https:
          enabled: true
          primary: true
          port: 8443
          targetPort: 8443
          protocol: HTTPS

  # Ingress configuration
  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/hostname: keycloak.eudi-adorsys.com
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: keycloak.eudi-adorsys.com
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: eudi-adorsys-tls
          hosts:
            - "*.eudi-adorsys.com"
            - "eudi-adorsys.com"

# Postgresql Configuration
postgresql:
  enabled: true
  auth:
    database: keycloakdb
    username: datevadmin
    existingSecret: keycloak-secret
    secretKeys:
      adminPasswordKey: KC_DB_PASSWORD
      userPasswordKey: KC_DB_PASSWORD
  primary:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: high-performance
      # storageClass: standard # minikube (local test)
  service:
    ports:
      postgresql: 5432

# External secrets
externalSecret:
  metadata:
    name: keycloak-external-secret
  spec:
    refreshInterval: 1h
    secretStoreRef:
      name: datev-secret-store
    target:
      name: keycloak-secret
      creationPolicy: Owner

# Job to create config map
metadata:
  name: download-env-file

volumeMounts:
  name: tmp-volume
  mountPath: /tmp

awsCli:
  image: amazon/aws-cli
  s3Bucket: keycloakenv
  envFilePath: /tmp/.env
  region: eu-central-1
  secretName: awssm-secret
  accessKeyID: AWS_ACCESS_KEY_ID
  secretAccessKey: AWS_SECRET_ACCESS_KEY
  sessionToken: AWS_SESSION_TOKEN

kubectl:
  image: bitnami/kubectl
  sleepDuration: 5

placeholder:
  image: busybox

job:
  restartPolicy: OnFailure
  serviceAccountName: keycloak-job-sa
  rbac:
    roleName: keycloak-job-role
    roleBindingName: keycloak-job-rolebinding
    roleAnnotations: {}
    roleBindingAnnotations: {}
    rules:
    - apiGroups: [""]
      resources: ["configmaps"]
      verbs: ["create", "get", "update", "delete", "patch"]
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods/exec"]
      verbs: ["create"]

awsSecretName: datev-wallet-secrets